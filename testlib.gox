// +build go_run_only
//
// Rename to testlib.go and go run it. It's named like this to prevent go get
// from loading the libraries as a dependency.
//

package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"reflect"
	"runtime"
	"strings"
	"text/tabwriter"
	"time"

	"github.com/avct/uasurfer"
	useragent "github.com/mileusna/useragent"
	"github.com/mssola/user_agent"
	"github.com/ua-parser/uap-go/uaparser"
	"zgo.at/gadget"
)

type UserAgent struct {
	UA      string
	Browser string
	OS      string
}

type UserAgents []UserAgent

func (ua UserAgents) String() string {
	var b strings.Builder
	for _, u := range ua {
		b.WriteString(fmt.Sprintf("%s %s %s\n", u.Browser, u.OS, u.UA))
	}
	return b.String()
}

func c(err error) {
	if err == nil {
		return
	}
	panic(err)
}

func diff(h string, data, result UserAgents) {
	fmt.Printf("\n=== %s ===\n\n", h)
	for i, r := range result {
		d := data[i]
		if r.Browser != d.Browser || r.OS != d.OS {
			fmt.Printf("%s\n", d.UA)
		}

		if r.Browser != d.Browser {
			fmt.Printf("    want: %q\n    got:  %q\n", d.Browser, r.Browser)
		}
		if r.OS != d.OS {
			fmt.Printf("    want: %q\n    got:  %q\n", d.OS, r.OS)
		}
	}
}

func bench(t io.Writer, h string, data UserAgents, f func(UserAgents, bool)) {
	n := 10

	start := time.Now()
	for i := 0; i < n; i++ {
		f(data, false)
	}
	d := time.Now().Sub(start)
	fmt.Fprintf(t, "%s\t%.4fs\t%s\n", h, d.Seconds(), (d / time.Duration(n) / time.Duration(len(data))))
}

func loadTestData() UserAgents {
	fp, err := os.Open("./testdata/top500")
	c(err)
	defer fp.Close()

	var uas UserAgents
	scanner := bufio.NewScanner(fp)
	for scanner.Scan() {
		line := scanner.Text()
		if line == "" || line[0] == '#' {
			continue
		}
		s := strings.Split(line, "\t")
		uas = append(uas, UserAgent{
			Browser: s[0],
			OS:      s[1],
			UA:      s[2],
		})
	}
	c(scanner.Err())

	return uas
}

var windowsVersions = map[string]string{
	"5.0":  "2000",
	"5.1":  "XP",
	"5.2":  "XP",
	"6.0":  "Vista",
	"6.1":  "7",
	"6.2":  "8",
	"6.3":  "8.1",
	"10.0": "10",
}

// https://github.com/avct/uasurfer
//
// - I don't like the API; it doesn't return a simple human-readable description.
//   The splitting in major/minor/patch is rarely useful.
//
// - Windows is shown as "Windows NT 6.1", instead of just "Windows 7".
//
// - FxiOS and CriOS return "Firefox" and "Chrome", which isn't really true, and
//   Opera and Edge are listed separately, instead of just "Chrome".
//
// - Browser versions aren't always set correct.
func main() {
	data := loadTestData()

	funcs := []func(UserAgents, bool){test_gadget, test_uasurfer, test_useragent, test_user_agent, test_uaparser}
	//funcs := []func(UserAgents, bool){test_gadget, test_uasurfer, test_useragent, test_user_agent}
	//funcs := []func(UserAgents, bool){test_gadget}

	if len(os.Args) > 1 {
		t := tabwriter.NewWriter(os.Stdout, 8, 8, 2, ' ', 0)
		fmt.Fprintln(t, "Library\tTotal\tPer op")
		for _, f := range funcs {
			bench(t,
				runtime.FuncForPC(reflect.ValueOf(f).Pointer()).Name()[10:],
				data, f)
		}
		t.Flush()

		return
	}

	for _, f := range funcs {
		f(data, true)
	}
}

func test_gadget(data UserAgents, showdiff bool) {
	result := make(UserAgents, len(data))
	for i, d := range data {
		ua := gadget.Parse(d.UA)
		result[i] = UserAgent{Browser: ua.Browser(), OS: ua.OS()}
	}

	if showdiff {
		diff("gadget", data, result)
	}
}

func test_uasurfer(data UserAgents, showdiff bool) {
	result := make(UserAgents, len(data))
	for i, d := range data {
		ua := uasurfer.Parse(d.UA)
		b := ua.Browser.Name.StringTrimPrefix()
		o := ua.OS.Name.StringTrimPrefix()

		if o == "MacOSX" {
			o = "macOS"
		}

		switch o {
		case "Linux":
			// Do nothing.
		case "Windows":
			o = fmt.Sprintf("%s %s", o, windowsVersions[fmt.Sprintf("%d.%d", ua.OS.Version.Major, ua.OS.Version.Minor)])
		case "Android":
			o = fmt.Sprintf("%s %d", o, ua.OS.Version.Major)
			if ua.OS.Version.Minor > 0 {
				o = fmt.Sprintf("%s.%d", o, ua.OS.Version.Minor)
			}
		default:
			o = fmt.Sprintf("%s %d.%d", o, ua.OS.Version.Major, ua.OS.Version.Minor)
		}

		switch b {
		case "Safari":
			b = fmt.Sprintf("%s %d.%d", b, ua.Browser.Version.Major, ua.Browser.Version.Minor)
		default:
			b = fmt.Sprintf("%s %d", b, ua.Browser.Version.Major)
		}

		result[i] = UserAgent{Browser: b, OS: o}
	}

	if showdiff {
		diff("uasurfer", data, result)
	}
}

// https://github.com/mileusna/useragent
//
// - Version is way too detailed: Chrome 80.0.3987.87, Linux x86_64
//
// - Windows is shown as "Windows NT 6.1", instead of just "Windows 7".
//
// - FxiOS and CriOS return "Firefox" and "Chrome", which isn't really true, and
//   Opera and Edge are listed separately, instead of just "Chrome".
func test_useragent(data UserAgents, showdiff bool) {
	result := make(UserAgents, len(data))
	for i, d := range data {
		ua := useragent.Parse(d.UA)
		b := fmt.Sprintf("%s %s", ua.Name, ua.Version)
		o := fmt.Sprintf("%s %s", ua.OS, ua.OSVersion)
		result[i] = UserAgent{Browser: b, OS: o}
	}

	if showdiff {
		diff("useragent", data, result)
	}
}

// https://github.com/mssola/user_agent
//
// - OS is not useful "Linux Core i7-4980HQ", "Intel Mac OS X 10_11_6", "Fedora"
//
// - Same for Browser; too much detail: "Chrome 79.0.3945.130"
//
// - Has quiet a few results that are just wrong.
func test_user_agent(data UserAgents, showdiff bool) {
	result := make(UserAgents, len(data))
	for i, d := range data {
		ua := user_agent.New(d.UA)
		b, v := ua.Browser()
		b = fmt.Sprintf("%s %s", b, v)
		o := fmt.Sprintf("%s", ua.OS())
		result[i] = UserAgent{Browser: b, OS: o}
	}

	if showdiff {
		diff("user_agent", data, result)
	}
}

// https://github.com/ua-parser/uap-go
//
// - Weird JS-like code, e.g. ToString() instead of String()
//
// - Long list of regexps from yaml file.
//
// - Ridiculously slow: about 500x slower than any other library.
func test_uaparser(data UserAgents, showdiff bool) {
	result := make(UserAgents, len(data))
	parser := uaparser.NewFromSaved()
	for i, d := range data {
		ua := parser.Parse(d.UA)
		b := fmt.Sprintf("%s", ua.UserAgent.ToString())
		o := fmt.Sprintf("%s", ua.Os.ToString())
		result[i] = UserAgent{Browser: b, OS: o}
	}

	if showdiff {
		diff("uaparser", data, result)
	}
}
